import math
import numpy as np

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def lineIntersectVector(pointOne, pointTwo, pointThree, pointFour):
    vNum12 = np.linalg.det(np.array([[pointOne[0], pointOne[1]],[pointTwo[0], pointTwo[1]]]))
    vNum34 = np.linalg.det(np.array([[pointThree[0], pointThree[1]],[pointFour[0], pointFour[1]]]))
    vDenomx12 = np.linalg.det(np.array([[pointOne[0], 1], [pointTwo[0], 1]]))
    vDenomx34 = np.linalg.det(np.array([[pointThree[0], 1], [pointFour[0], 1]]))
    vDenomy12 = np.linalg.det(np.array([[pointOne[1], 1], [pointTwo[1], 1]]))
    vDenomy34 = np.linalg.det(np.array([[pointThree[1], 1], [pointFour[1], 1]]))

    vXNum = np.linalg.det(np.array([[vNum12, vDenomx12], [vNum34, vDenomx34]]))
    vYNum = np.linalg.det(np.array([[vNum12, vDenomy12], [vNum34, vDenomy34]]))
    vDenom = np.linalg.det(np.array([[vDenomx12, vDenomy12], [vDenomx34, vDenomy34]]))

    result = np.array([vXNum / vDenom, vYNum / vDenom])
    #print(result)
    return result

def lineSegmentIntersectParam(pointOne, pointTwo, pointThree, pointFour):
    #pointOne and pointTwo form line segment 1, pointThree and pointFour form line segment 2
    tTop = np.array([[pointOne[0] - pointThree[0], pointThree[0] - pointFour[0]],[pointOne[1] - pointThree[1], pointThree[1] - pointFour[1]]])
    tBot = np.array([[pointOne[0] - pointTwo[0], pointThree[0] - pointFour[0]],[pointOne[1] - pointTwo[1], pointThree[1] - pointFour[1]]])
    t = np.linalg.det(tTop)/np.linalg.det(tBot)
    uTop = np.array([[pointOne[0] - pointThree[0], pointOne[0] - pointTwo[0]], [pointOne[1] - pointThree[1], pointOne[1] - pointTwo[1]]])
    uBot = np.array([[pointOne[0] - pointTwo[0], pointThree[0] - pointFour[0]], [pointOne[1] - pointTwo[1], pointThree[1] - pointFour[1]]])
    u = np.linalg.det(uTop)/np.linalg.det(uBot)
    #print(t, u)
    return np.array([t, u])

def lineSegmentIntersectBool(paramTU):
    if(0 <= paramTU[0] <= 1) and (0 <= paramTU[1] <= 1):
        return True
    else:
        return False

def does_segment_intersect_circle(pointOne, pointTwo, circle_center, radius, roboradius):

    roboRadius = roboradius
    startToCenter = circle_center - pointOne
    endToCenter = circle_center - pointTwo
    if (getDist(startToCenter) <= radius) or (getDist(endToCenter) <= radius):
        return True

    if (pointOne[0] != pointTwo[0]) and (pointOne[1] != pointTwo[1]):
        slope = getSlope(pointOne, pointTwo)
        slopePerp = -(1 / slope) #get perp slope
        hypo = math.sqrt(1**2 + slopePerp**2)
        offset = getOffset(slopePerp, radius, hypo)
        roboRadiusOffset = getOffset(slopePerp, roboRadius, hypo)
    elif (pointOne[0] == pointTwo[0]):
        offset = np.array([radius, 0])
        roboRadiusOffset = np.array([roboRadius, 0])
    else:
        offset = np.array([0, radius])
        roboRadiusOffset = np.array([0, roboRadius])
    side = whichSide(pointOne, pointTwo, circle_center)
    if(side == 0):
        return True
    #print(side)
    pointThree = circle_center + offset
    pointFour = circle_center - offset

    v12 = pointTwo - pointOne
    pointOneOff = np.array([0, 0])
    pointTwoOff = np.array([0, 0])
    if (side > 0 and getVectorDirection(v12) > 0) or (side < 0 and getVectorDirection(v12) == 0):
        #print("Offset right")
        pointOneOff = pointOne + roboRadiusOffset
        pointTwoOff = pointTwo + roboRadiusOffset
    else:
        #print("Offset left")
        pointOneOff = pointOne - roboRadiusOffset
        pointTwoOff = pointTwo - roboRadiusOffset

    #print(pointOneOff, pointTwoOff)

    tu = lineSegmentIntersectParam(pointOneOff, pointTwoOff, pointThree, pointFour)
    TorF = lineSegmentIntersectBool(tu)
    t = tu[0]
    u = tu[1]
    return TorF

def whichSide(pointOne, pointTwo, circleCenter):
    determinant = (pointTwo[0] - pointOne[0]) * (circleCenter[1] - pointOne[1]) - (pointTwo[1] - pointOne[1]) * (circleCenter[0] - pointOne[0])
    if (determinant > 0):
        return -1
    elif(determinant < 0):
        return 1
    else:
        return 0

def getSlope(pointOne, pointTwo):
    slope = (pointTwo[1] - pointOne[1]) / (pointTwo[0] - pointOne[0])
    return slope

def getOffset(slope, radius, hypo):
    xOffset = 1 * radius / hypo
    yOffset = slope * radius / hypo
    result = np.array([xOffset, yOffset])
    return result

def getTangentPoints(pointP, pointC, radius):
    vectorCP = np.array([pointP[0] - pointC[0], pointP[1] - pointC[1]])
    vectorCPPerp = np.array([vectorCP[1] * -1, vectorCP[0]])
    vectorOP = pointP
    vectorOC = pointC
    d = getDist(vectorCP)
    vectorOT1 = vectorOC + (radius/d)**2 * vectorCP + (radius/d) * (math.sqrt(d**2-radius**2)/d) * vectorCPPerp
    vectorOT2 = vectorOC + (radius/d)**2 * vectorCP - (radius/d) * (math.sqrt(d**2-radius**2)/d) * vectorCPPerp
    result = np.array([vectorOT1, vectorOT2])
    return result

def getTangentIntersects(pointOne, pointTwo, circleCenter, radius, roboradius):
    pointOneResult = getTangentPoints(pointOne, circleCenter, radius + roboradius)
    pointTwoResult = getTangentPoints(pointTwo, circleCenter, radius + roboradius)
    tangentD1 = lineIntersectVector(pointOne, pointOneResult[0], pointTwo, pointTwoResult[1])
    tangentD2 = lineIntersectVector(pointOne, pointOneResult[1], pointTwo, pointTwoResult[0])
    #print("Tangent points")
    #print(pointOneResult)
    #print(pointTwoResult)
    #print("intersections")
    #print(tangentD1)
    #print(tangentD2)

    validity1 = validateTangentIntersection(tangentD1, listOfCircles)
    validity2 = validateTangentIntersection(tangentD2, listOfCircles)
    
    #print(validity1, validity2)
    if(validity1 == -1) and (validity2 == -1):
        print("case1")
        return tangentD1 if (getDist(tangentD1 - pointOne) <= getDist(tangentD2 - pointOne)) else tangentD2
    elif(validity1 == -1) and (validity2 != -1):
        print("case2")
        return tangentD1
    elif(validity1 != -1) and (validity2 == -1):
        print("case3")
        return tangentD2
    else:
        print("case4")
        index = validity1 if (getDist(tangentD1 - pointOne) <= getDist(tangentD2 - pointOne)) else validity2
        return getTangentIntersects(pointOne, pointTwo, listOfCircles[index,0], listOfCircles[index,1], roboradius)

def getDist(pointOne):
    return math.sqrt(pointOne[0]**2 + pointOne[1]**2)

def getVectorDirection(vector):
    if vector[1] > 0:
        return 1 #vector points upwards
    elif vector[1] < 0:
        return 0 #vector points downwards
    else:
        return 2

def validateTangentIntersection(intersect, listOfCircles):
    flag = -1
    for i in range(listOfCircles.shape[0]):
        if(getDist(listOfCircles[i,0] - intersect) <= listOfCircles[i,1]):
            flag = i
            return flag
    return flag

def getRoute(listOfLineSegmentPoints, listOfCircles, roboradius):
    flagR = False
    flagE = True
    while(flagE):
        flagE = False
        for i in range(listOfLineSegmentPoints.shape[0] - 1):
            flagR = False
            p1 = listOfLineSegmentPoints[i]
            p2 = listOfLineSegmentPoints[i + 1]
            #print(p1, p2)
            for j in range(listOfCircles.shape[0]):
                cCenter = listOfCircles[j, 0]
                cRadius = listOfCircles[j, 1]
                if(does_segment_intersect_circle(p1, p2, cCenter, cRadius, roboradius)):
                    #print(p1, p2, " intersects with ", cCenter, cRadius)
                    flagR = True
                    pMid = getTangentIntersects(p1, p2, cCenter, cRadius, roboradius + 0.2)
                    #print(pMid)
                    listOfLineSegmentPoints = np.insert(listOfLineSegmentPoints, i+1, pMid, 0)
                    #print("New List Here ---------------")
                    #print(listOfLineSegmentPoints)
                    break
            if(flagR == True):
                flagE = True
                break
    return listOfLineSegmentPoints



listOfLineSegments = np.array([[1.0,1.0], [5.0, 10.0]])

listOfCircles = np.array([[[4, 3], math.sqrt(5)],
                          [[7, 8], 1]])
segment_start = np.array([1, 1])
segment_end = np.array([5, 10])
circle_center = np.array([4, 3])
radius = math.sqrt(5)
circle_center_2 = np.array([0.25, 4.05])
roboradius = 0.5
does_intersect = does_segment_intersect_circle(segment_start, segment_end, circle_center, radius, roboradius)

print(getRoute(listOfLineSegments, listOfCircles, roboradius))